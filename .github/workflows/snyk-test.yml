name: Shared Snyk Test Workflow

####################################################################################################
##  WORKFLOW TRIGGER
####################################################################################################
on:
  # Workflow will run when called by another workflow.
  workflow_call:

####################################################################################################
##  WORKFLOW JOBS
####################################################################################################
jobs:
  # snyk_exclusions fetches the code and finds test or example projects to exclude from Snyk scans.
  snyk_exclusions:
    name: Run Snyk exclusions
    # Using the latest Ubuntu GitHub-hosted runner.
    runs-on: ubuntu-latest
    # Creates output variables to be used in steps or other jobs.
    outputs: 
      SNYK_EXCLUSIONS: ${{ steps.snyk-exclusions.outputs.SNYK_EXCLUSIONS }}
      PR_NUMBER: ${{ fromJSON(steps.snyk-test-variables.outputs.result).pr_number }}
      SNYK_TEST_URL: ${{ fromJSON(steps.snyk-test-variables.outputs.result).snyk_test_url }}
      PR_COMMENT_URL: ${{ fromJSON(steps.snyk-test-variables.outputs.result).pr_comment_url }}
      PR_STATUSES_URL: ${{ fromJSON(steps.snyk-test-variables.outputs.result).pr_statuses_url }}

    steps:
      # Gets the values needed for other steps of jobs.
      - name: Set Snyk test variables
        id: snyk-test-variables
        uses: actions/github-script@v6
        with:
          script: |
            // Get the pull request number.
            const unitTestWorkflowRun = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{github.event.workflow_run.id }},
            });
            const prNumber = unitTestWorkflowRun.data.pull_requests[0].number;

            // Get the Snyk test workflow run url.
            const snykTestWorkflowRun = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{github.run_id }},
            });
            const snykTestUrl = snykTestWorkflowRun.data.html_url;

            // Get urls from pull request for statuses and comments.
            const pullRequest = await github.request('GET /repos/{owner}/{repo}/pulls/{pr_number}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pr_number: prNumber,
            });
            const prCommentUrl = pullRequest.data.comments_url;
            const prStatusesUrl = pullRequest.data.statuses_url;

            // Send pending status for Snyk test to pull request.
            await github.request('POST ' + prStatusesUrl, {
              state: 'pending',
              target_url: snykTestUrl,
              description: 'Snyk test is running.',
              context: 'github-actions/snyk-test',
              });

            // Output.
            console.log('Pull Request: #' + prNumber);
            console.log('URL for Snyk test results: ' + snykTestUrl);
            console.log('URL for pr comments: ' + prCommentUrl);
            console.log('URL for pr statuses: ' + prStatusesUrl);

            return { 
              pr_number:prNumber,
              snyk_test_url:snykTestUrl,
              pr_comment_url:prCommentUrl,
              pr_statuses_url:prStatusesUrl
            };

      # Downloads the artifact created from the unit-test workflow containing the workspace from that workflow.
      - name: Download artifact
        id: download-artifact
        uses: actions/github-script@v6
        with:
          script: |
            // Get list of artifacts from calling workflow.
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }},
            });
            // Find the needed artifact.
            const matchedArtifactID = artifacts.data.artifacts.find(artifact => artifact.name == 'workspace').id;
            // Download the artifact.
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchedArtifactID,
              archive_format: 'zip',
            });
            // Save the artifact to the workflow workspace.
            const fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/workspace.zip', Buffer.from(download.data));

      # Unzips the downloaded workspace.
      - name: Unzip workspace
        run: unzip workspace.zip

      # Creates a comma separated list of directories or files to exclude from code scans.
      - name: Find test or example project(s) to exclude
        id: snyk-exclusions
        shell: pwsh
        run: |
          # Filter to only Test and Example projects and add them to snykExclusions.
          $snykExclusions = Get-ChildItem -Directory | Select-Object Name
          $snykExclusions = $snykExclusions | Where-Object { ($_ -Match 'Tests') -or ($_ -Match 'Example') }
          $snykExclusions = $snykExclusions | ConvertTo-CSV -UseQuotes Never -NoTypeInformation | Select-Object -Skip 1
          $snykExclusions = $snykExclusions -join ','
          echo "snyk exclusions: $snykExclusions"

          # Set output.
          echo "SNYK_EXCLUSIONS=$snykExclusions" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      # Using GitHub upload-artifact action to persist the workspace for the next job.
      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./

  # snyk_test job runs scan against project dependencies, looking for vulnerabilities.
  snyk_test:
    name: Run Snyk test
    # This job will not run until snyk_exclusions job finishes successfully.
    needs: snyk_exclusions
    # Using the latest Ubuntu GitHub-hosted runner.
    runs-on: ubuntu-latest

    steps:
      # Using GitHub download-artifact action to get the workspace from the last job.
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      # Using Snyk provided action for dotnet projects.
      - name: Run Snyk test
        id: snyk-test
        uses: snyk/actions/dotnet@master
        env:
          # Uses SNYK_TOKEN from org secrets
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --dotnet-runtime-resolution --exclude=${{ needs.snyk_exclusions.outputs.SNYK_EXCLUSIONS }}

      # Determines if Snyk test succeeded and writes a comment to the pull request.
      - name: Report Snyk test success
        uses: actions/github-script@v6
       # Uses GitHub Actions status check function to check that previous steps completed successfully.
        if: ${{ success() }}
        with:
          script: |
            // Result of the Snyk test.
            const reportComment = ':white_check_mark: Snyk test found no dependency vulnerabilities.\n\nView the details at: ';

            // Output to console.
            console.log('Report comment: ' + reportComment + '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}');

            // Create a pr comment with Snyk test result.
            await github.request('POST ${{ needs.snyk_exclusions.outputs.PR_COMMENT_URL }}', {
              body: reportComment + '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}'
            });

            // Create pr status for Snyk test result.
            await github.request('POST ${{ needs.snyk_exclusions.outputs.PR_STATUSES_URL }}', {
              state: 'success',
              target_url: '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}',
              description: 'Snyk test found no dependency vulnerabilities.',
              context: 'github-actions/snyk-test',
             });

      # Determines if Snyk test failed and writes a comment to the pull request.
      - name: Report Snyk test failure
        uses: actions/github-script@v6
        # Uses GitHub Actions status check function to check if the snyk-test step failed.
        if: ${{ failure() && steps.snyk-test.conclusion == 'failure' }}
        with:
          script: |
            // Result of the Snyk test.
            const reportComment = ':x: Snyk test found dependency vulnerabilities.\n\nView the details at: ';

            // Output to console.
            console.log('Report comment: ' + reportComment + '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}');

            // Create a pr comment with Snyk test result.
            await github.request('POST ${{ needs.snyk_exclusions.outputs.PR_COMMENT_URL }}', {
              body: reportComment + '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}'
            });

            // Create pr status for Snyk test result.
            await github.request('POST ${{ needs.snyk_exclusions.outputs.PR_STATUSES_URL }}', {
              state: 'failure',
              target_url: '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}',
              description: 'Snyk test found dependency vulnerabilities.',
              context: 'github-actions/snyk-test',
             });

      # Determines if there was an error during Snyk test and writes a comment to the pull request.
      - name: Report Snyk test error
        uses: actions/github-script@v6
        # Uses GitHub Actions status check function to check if there was an error.
        if: ${{ failure() && steps.snyk-test.conclusion != 'failure' }}
        with:
          script: |
            // Result of the Snyk test.
            const reportComment = ':heavy_exclamation_mark: Snyk test experienced an error.\n\nView the details at: ';

            // Output to console.
            console.log('Report comment: ' + reportComment + '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}');

            // Create a pr comment with Snyk test result.
            await github.request('POST ${{ needs.snyk_exclusions.outputs.PR_COMMENT_URL }}', {
              body: reportComment + '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}'
            });

            // Create pr status for Snyk test result.
            await github.request('POST ${{ needs.snyk_exclusions.outputs.PR_STATUSES_URL }}', {
              state: 'success',
              target_url: '${{ needs.snyk_exclusions.outputs.SNYK_TEST_URL }}',
              description: 'Snyk test experienced an error.',
              context: 'github-actions/snyk-test',
             });
