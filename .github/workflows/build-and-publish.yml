name: Shared Build and Publish Workflow

####################################################################################################
##  WORKFLOW TRIGGER
####################################################################################################
on:
  # Workflow will run when called by another workflow.
  workflow_call:

####################################################################################################
##  WORKFLOW JOBS
####################################################################################################
jobs:
  # set_variables sets variables needed for the workflow
  set_variables:
    name: Set variables
    # Using the latest Ubuntu GitHub-hosted runner.
    runs-on: ubuntu-latest
    # Creates output variables to be used in steps or other jobs.
    outputs: 
      package_name: ${{ steps.variables.outputs.package_name }}
      package_version: ${{ steps.variables.outputs.package_version }}

    steps:
      # Set various variables needed in other jobs.
      - name: Set variables
        id: variables
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Gets release tag. 
          releaseTag=$(gh api -H "Accept: application/vnd.github+json" /repos/${GITHUB_REPOSITORY}/releases | jq -r 'first | .tag_name')
          echo "release tag: $releaseTag"

          # Gets package name from the release tag.
          packageName=${releaseTag%%?[[:digit:]]*}
          echo "package name: $packageName"
          echo ::set-output name=package_name::$packageName

          # Gets package version from the release tag.
          packageVersion=${releaseTag#${releaseTag%%[0-9]*}}
          echo "package version: $packageVersion"
          echo ::set-output name=package_version::$packageVersion

  # build job builds for each of the target frameworks of the solution.
  build:
    name: Build ${{ needs.set_variables.outputs.package_name }}
    # This job will not run until set_variables is complete and passes.
    needs: set_variables
    # Using the latest Windows GitHub-hosted runner.
    runs-on: windows-latest

    steps:
      # Using Github checkout action to retrieve the codebase.
      - name: Fetch code
        uses: actions/checkout@v3

      # Using dotnet build to build and package the solution.
      - name: Build
        run: dotnet build ${{ needs.set_variables.outputs.package_name }}/${{ needs.set_variables.outputs.package_name }}.csproj --configuration Release

      # Using GitHub upload-artifact action to persist the workspace for the next job.
      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./

  # snyk_monitor job reports project to Snyk UI for vulnerability monitoring.
  snyk_monitor:
    name: Snyk monitor
    # This job will not run until build is complete and pass.
    needs: [ set_variables, build ]
    # Using the latest Ubuntu GitHub-hosted runner.
    runs-on: ubuntu-latest

    steps:
      # Using GitHub download-artifact action to get the workspace from the last job.
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      # Using Snyk provided action for Snyk monitor command.
      - name: Run Snyk monitor
        uses: snyk/actions/node@master
        env:
          # Uses SNYK_TOKEN from org secrets.
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --file=${{ needs.set_variables.outputs.package_name }}/${{ needs.set_variables.outputs.package_name }}.sln

  # publish job pushed package to NuGet.org.
  publish:
    name: Publish ${{ needs.set_variables.outputs.package_name }}
    # This job will not run until set_variables and build are complete and pass.
    needs: [ set_variables, build ]
    # Using the latest Ubuntu GitHub-hosted runner.
    runs-on: ubuntu-latest
    # Uses Release Package environment to require approval to publish a package to NuGet.org.
    environment: 
      name: Release Package
  
    steps:
      # Displays the package that was approved.
      - name: Package ${{ needs.set_variables.outputs.package_name }} approved
        run: echo Package ${{ needs.set_variables.outputs.package_name }} approved for publishing.

      # Using GitHub download-artifact action to get the workspace from the last job.
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      # Using dotnet nuget push to publish the specified package to NuGet.org.
      - name: Publish ${{ needs.set_variables.outputs.package_name }}
        # Getting the NUGET_API_KEY from the org secrets.
        env:
          API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ${{ needs.set_variables.outputs.package_name }}/bin/Release/${{ needs.set_variables.outputs.package_name }}.${{ needs.set_variables.outputs.package_version }}.nupkg --api-key ${{ env.API_KEY }} --source https://api.nuget.org/v3/index.json
