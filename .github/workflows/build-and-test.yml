name: Shared Build and Test Workflow

####################################################################################################
##  WORKFLOW TRIGGER
####################################################################################################
on:
  # Workflow will run when called by another workflow.
  workflow_call:

####################################################################################################
##  WORKFLOW JOBS
####################################################################################################
jobs:
  # set_variables sets variables needed for the workflow
  # set_variables:
  #   name: Set variables
  #   # Using the latest Ubuntu GitHub-hosted runner.
  #   runs-on: ubuntu-latest
  #   # Creates output variables to be used in steps or other jobs.
  #   outputs: 
  #     package_name: ${{ steps.variables.outputs.package_name }}

  #   steps:
  #     # Set various variables needed in other jobs.
  #     - name: Set variables
  #       id: variables
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         # Get files changed in pull request.
  #         # files=$(gh api -H "Accept: application/vnd.github+json" /repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files | jq -r '.[].filename')
  #         files=$(gh api -H "Accept: application/vnd.github+json" /repos/${GITHUB_REPOSITORY}/pulls/102/files | jq -r '.[].filename')
  #         echo ${files[*]}

  #         # Gets package name from the release tag.
  #         packageName=${releaseTag%%?[[:digit:]]*}
  #         echo "package name: $packageName"
  #         echo ::set-output name=package_name::$packageName

  #         # Gets package version from the release tag.
  #         packageVersion=${releaseTag#${releaseTag%%[0-9]*}}
  #         echo "package version: $packageVersion"
  #         echo ::set-output name=package_version::$packageVersion

  # build_and_test job builds and runs unit tests for each of the target frameworks of the solution.
  build_and_test:
    name: Build and test projects
    # Using the latest Windows GitHub-hosted runner.
    runs-on: windows-latest

    steps:
      # Using Github checkout action to retrieve the codebase.
      - name: Fetch code
        uses: actions/checkout@v3

      # Using dotnet build to build and package the solution.
      - name: Build
        run: dotnet build --configuration Release

      # Using dotnet test to run any unit tests found in the project.
      # If any test fails, the job and workflow will fail.
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal
      
  #     # Using GitHub upload-artifact action to persist the workspace for the next job.
  #     - name: Upload workspace
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: workspace
  #         path: ./

  # # Calls snyk-exclusion reusable workflow.
  # snyk_exclusions:
  #   name: Snyk exclusions
  #   # This job will not run until build_and_test is complete and passes.
  #   needs: build_and_test
  #   uses: ./.github/workflows/snyk-exclusions.yml

  # # snyk_test job runs scan against project dependencies, looking for vulnerabilities.
  # snyk_test:
  #   name: Snyk test
  #   # This job will not run until build_and_test job finishes successfully.
  #   needs: snyk_exclusions
  #   # Using the latest Ubuntu GitHub-hosted runner.
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     # Using GitHub download-artifact action to get the workspace from the last job.
  #     - name: Download workspace
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: workspace

  #     # Using Snyk provided action for dotnet projects.
  #     - name: Run Snyk test
  #       uses: snyk/actions/dotnet@master
  #       # Continue on error needs to be set to true to upload the results at the end.
  #       continue-on-error: true 
  #       env:
  #         # Uses SNYK_TOKEN from org secrets
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         args: --all-projects --exclude=${{ needs.snyk_exclusions.outputs.scan_exclusions }} --sarif-file-output=snyk.sarif

  #     # Use GitHub code scanning action to upload Snyk results to repo Security tab.
  #     - name: Upload Snyk result to GitHub Code Scanning
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: snyk.sarif
